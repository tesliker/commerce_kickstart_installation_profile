<?php

/**
 * @file
 * Performs a standard Drupal installation with additional configuration of the
 * Drupal Commerce modules and components.
 */

// Define some Commerce Kickstart specific components.
define('KICKSTART_DEFAULT_THEME', 'bootstrap_subtheme');
define('KICKSTART_ADMIN_THEME', 'seven');


/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function commerce_kickstart_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', KICKSTART_DEFAULT_THEME);
  $admin_theme = KICKSTART_ADMIN_THEME;
  $values = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'search',
      'delta' => 'form',
      'theme' => $default_theme,
      'status' => 0, // Do not enable the search block.
      'weight' => -1,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'node',
      'delta' => 'recent',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10, // Display the user login block below the cart block.
      'region' => 'sidebar_first',
      'pages' => "cart\ncheckout/*", // And hide it on cart / checkout pages.
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'navigation',
      'theme' => $default_theme,
      'status' => 0, // Do not enable the navigation menu block.
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'powered-by',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'footer',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'new',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'search',
      'delta' => 'form',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => -10,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'article',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Create a default vocabulary named "Tags", enabled for the 'article' content type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $help = st('Enter a comma-separated list of words to describe your content.');
  $vocabulary = (object) array(
    'name' => 'Tags',
    'description' => $description,
    'machine_name' => 'tags',
    'help' => $help,

  );
  taxonomy_vocabulary_save($vocabulary);

  $field = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    // Set cardinality to unlimited for tagging.
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'entity_type' => 'node',
    'label' => $vocabulary->name,
    'bundle' => 'article',
    'description' => $vocabulary->help,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);


  // Create an image field named "Image", enabled for the 'article' content type.
  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
    'field_name' => 'field_image',
    'type' => 'image',
    'cardinality' => 1,
    'translatable' => TRUE,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);


  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_image',
    'entity_type' => 'node',
    'label' => st('Image'),
    'bundle' => 'article',
    'description' => st('Upload an image to go with this article.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),

    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'large', 'image_link' => ''),
        'weight' => -1,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
        'weight' => -1,
      ),
    ),
  );
  field_create_instance($instance);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  // Do not save this home menu item for now.
  // menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');

  // Perform additional non-standard installation configuration of the Commerce
  // modules and components.
  _commerce_kickstart_install();
}

/**
 * Performs additional configuration for Drupal Commerce modules and components.
 */
function _commerce_kickstart_install() {
  // Enable Commerce blocks.
  $default_theme = variable_get('theme_default', KICKSTART_DEFAULT_THEME);
  $admin_theme = KICKSTART_ADMIN_THEME;
  $values = array(
    array(
      'module' => 'commerce_cart',
      'delta' => 'cart',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => "cart\ncheckout/*",
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();

  // Add an image field to the default product type.
  _commerce_kickstart_create_product_image_field('commerce_product', 'product');

  // Insert a product display node type into the database.
  $types = array(
    array(
      'type' => 'product_display',
      'name' => st('Product display'),
      'base' => 'node_content',
      'description' => st('Use <em>product displays</em> to present Add to Cart form for products to your customers.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Update "Product" comment and author information settings.
  variable_set('comment_product_display', COMMENT_NODE_HIDDEN);
  variable_set('node_submitted_product_display', FALSE);

  // Add the product reference field to our product display node type.
  _commerce_kickstart_create_product_reference('node', 'product_display');

  // Give checkout access to anonymous and authenticated users.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access checkout'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access checkout'));

  // Allow users to view their own completed orders.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('view own commerce_order entities'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('view own commerce_order entities'));

  // Disable Views' Advanced Help module nag message until it's production ready.
  variable_set('views_hide_help_message', TRUE);

  // If Admin Menu is installed, collapse the module fieldsets.
  variable_set('admin_menu_tweak_modules', TRUE);

  // Add a shortcut set for store administration.
  $set = new stdClass;
  $set->title = st('Store administration');
  $set->links = array(
    array('link_path' => 'admin/commerce/products/add', 'link_title' => st('Add product')),
    array('link_path' => 'node/add/product-display', 'link_title' => st('Add product display')),
    array('link_path' => 'admin/commerce/products', 'link_title' => st('View products')),
    array('link_path' => 'admin/commerce/orders', 'link_title' => st('View orders')),
    array('link_path' => 'admin/commerce/config', 'link_title' => st('Configure store')),
  );
  shortcut_set_save($set);

  // Apply the shortcut set to the first user.
  shortcut_set_assign_user($set, (object) array('uid' => 1));
  
  // tesliker additions
  // insert ckeditor on full_html profile
  $nid = db_insert('wysiwyg') // Table name no longer needs {}
  ->fields(array(
    'format' => 'full_html',
    'editor' => 'ckeditor',
    'settings' => 'a:16:{s:7:"default";i:1;s:11:"user_choose";i:0;s:11:"show_toggle";i:1;s:5:"theme";s:0:"";s:8:"language";s:2:"en";s:7:"buttons";a:2:{s:7:"default";a:30:{s:4:"Bold";i:1;s:6:"Italic";i:1;s:9:"Underline";i:1;s:6:"Strike";i:1;s:11:"JustifyLeft";i:1;s:13:"JustifyCenter";i:1;s:12:"JustifyRight";i:1;s:12:"JustifyBlock";i:1;s:12:"BulletedList";i:1;s:12:"NumberedList";i:1;s:7:"Outdent";i:1;s:6:"Indent";i:1;s:4:"Undo";i:1;s:4:"Redo";i:1;s:4:"Link";i:1;s:6:"Unlink";i:1;s:6:"Anchor";i:1;s:5:"Image";i:1;s:11:"Superscript";i:1;s:10:"Blockquote";i:1;s:6:"Source";i:1;s:14:"HorizontalRule";i:1;s:3:"Cut";i:1;s:4:"Copy";i:1;s:5:"Paste";i:1;s:9:"PasteText";i:1;s:13:"PasteFromWord";i:1;s:6:"Format";i:1;s:5:"Table";i:1;s:9:"SelectAll";i:1;}s:4:"imce";a:1:{s:4:"imce";i:1;}}s:15:"toolbarLocation";s:3:"top";s:14:"resize_enabled";i:1;s:24:"default_toolbar_grouping";i:0;s:24:"simple_source_formatting";i:1;s:11:"css_setting";s:5:"theme";s:8:"css_path";s:0:"";s:9:"stylesSet";s:0:"";s:13:"block_formats";s:32:"p,address,pre,h2,h3,h4,h5,h6,div";s:20:"advanced__active_tab";s:11:"edit-output";s:21:"forcePasteAsPlainText";i:0;}'
  ))
  ->execute();
  //jquery_update
  variable_set('jquery_update_jquery_version', '1.7');
  variable_set('jquery_update_jquery_admin_version', '1.5');
  theme_enable(array('bootstrap'));
  $enable = array(
    'theme_default' => 'bootstrap_subtheme',
    'admin_theme' => 'seven',
    //'zen'
  );
  theme_enable($enable);
  foreach ($enable as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
    }
  }
  theme_disable(array('bartik'));
  
 /* variable_set('theme_bootstrap_subtheme_settings',  'a:64:{s:11:"toggle_logo";i:0;s:11:"toggle_name";i:0;s:13:"toggle_slogan";i:0;s:24:"toggle_node_user_picture";i:1;s:27:"toggle_comment_user_picture";i:1;s:32:"toggle_comment_user_verification";i:1;s:14:"toggle_favicon";i:1;s:16:"toggle_main_menu";i:0;s:21:"toggle_secondary_menu";i:0;s:12:"default_logo";i:1;s:9:"logo_path";s:0:"";s:11:"logo_upload";s:0:"";s:15:"default_favicon";i:1;s:12:"favicon_path";s:0:"";s:14:"favicon_upload";s:0:"";s:19:"general__active_tab";s:19:"edit-theme-settings";s:21:"bootstrap__active_tab";s:15:"edit-components";s:20:"bootstrap_breadcrumb";s:1:"1";s:25:"bootstrap_breadcrumb_home";i:0;s:26:"bootstrap_breadcrumb_title";i:1;s:25:"bootstrap_navbar_position";s:0:"";s:24:"bootstrap_navbar_inverse";i:0;s:37:"bootstrap_region_well-header_top_left";s:0:"";s:38:"bootstrap_region_well-header_top_right";s:0:"";s:35:"bootstrap_region_well-branding_left";s:0:"";s:36:"bootstrap_region_well-branding_right";s:0:"";s:32:"bootstrap_region_well-navigation";s:0:"";s:28:"bootstrap_region_well-header";s:0:"";s:33:"bootstrap_region_well-highlighted";s:0:"";s:26:"bootstrap_region_well-help";s:0:"";s:29:"bootstrap_region_well-content";s:0:"";s:35:"bootstrap_region_well-sidebar_first";s:4:"well";s:36:"bootstrap_region_well-sidebar_second";s:0:"";s:28:"bootstrap_region_well-footer";s:0:"";s:30:"bootstrap_region_well-page_top";s:0:"";s:33:"bootstrap_region_well-page_bottom";s:0:"";s:36:"bootstrap_region_well-dashboard_main";s:0:"";s:39:"bootstrap_region_well-dashboard_sidebar";s:0:"";s:40:"bootstrap_region_well-dashboard_inactive";s:0:"";s:21:"bootstrap_anchors_fix";i:1;s:34:"bootstrap_anchors_smooth_scrolling";i:1;s:25:"bootstrap_popover_enabled";i:1;s:27:"bootstrap_popover_animation";i:1;s:22:"bootstrap_popover_html";i:0;s:27:"bootstrap_popover_placement";s:5:"right";s:26:"bootstrap_popover_selector";s:0:"";s:25:"bootstrap_popover_trigger";a:4:{s:5:"click";s:5:"click";s:5:"hover";i:0;s:5:"focus";i:0;s:6:"manual";i:0;}s:23:"bootstrap_popover_title";s:0:"";s:25:"bootstrap_popover_content";s:0:"";s:23:"bootstrap_popover_delay";s:1:"0";s:27:"bootstrap_popover_container";s:4:"body";s:25:"bootstrap_tooltip_enabled";i:1;s:30:"bootstrap_tooltip_descriptions";i:1;s:27:"bootstrap_tooltip_animation";i:1;s:22:"bootstrap_tooltip_html";i:0;s:27:"bootstrap_tooltip_placement";s:9:"auto left";s:26:"bootstrap_tooltip_selector";s:0:"";s:25:"bootstrap_tooltip_trigger";a:4:{s:5:"hover";s:5:"hover";s:5:"focus";s:5:"focus";s:5:"click";i:0;s:6:"manual";i:0;}s:23:"bootstrap_tooltip_delay";s:1:"0";s:27:"bootstrap_tooltip_container";s:4:"body";s:13:"bootstrap_cdn";s:5:"3.0.2";s:20:"bootstrap_bootswatch";s:0:"";s:26:"bootstrap_rebuild_registry";i:0;s:29:"bootstrap_toggle_jquery_error";i:0;}');  */
}
